(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{222:function(a,e,s){"use strict";s.r(e);var n=s(0),t=Object(n.a)({},(function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[a._v("#")]),a._v(" 语法")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("pattern"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("flags\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("RegExp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("pattern "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("RegExp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("pattern "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("p",[a._v("常用 flags 包括 g（全局匹配），i（忽略大小写），m（多行匹配； 将开始和结束字符（^和$）视为在多行上工作）。")]),a._v(" "),s("h2",{attrs:{id:"正则表达式特殊字符含义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式特殊字符含义"}},[a._v("#")]),a._v(" 正则表达式特殊字符含义")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("字符类别")]),a._v(" "),s("ul",[s("li",[s("code",[a._v(".")]),a._v(": (点号，小数点) 匹配任意单个字符，但是行结束符除外：\\n \\r \\u2028 或 \\u2029。在字符集（如[xyz]）中，点( . )失去其特殊含义，并匹配一个字面点( . )。")]),a._v(" "),s("li",[s("code",[a._v("\\d")]),a._v(": 匹配任意阿拉伯数字。等价于[0-9]。")]),a._v(" "),s("li",[s("code",[a._v("\\D")]),a._v(": 匹配任意一个不是阿拉伯数字的字符。等价于[^0-9]。")]),a._v(" "),s("li",[s("code",[a._v("\\w")]),a._v(": 匹配任意来自基本拉丁字母表中的字母数字字符，还包括下划线。等价于 [A-Za-z0-9_]。")]),a._v(" "),s("li",[s("code",[a._v("\\W")]),a._v(": 匹配任意不是基本拉丁字母表中单词（字母数字下划线）字符的字符。等价于 [^A-Za-z0-9_]。")]),a._v(" "),s("li",[s("code",[a._v("\\s")]),a._v(": 匹配一个空白符，包括空格、制表符、换页符、换行符和其他 Unicode 空格。")]),a._v(" "),s("li",[s("code",[a._v("\\S")]),a._v(": 匹配一个非空白符。")]),a._v(" "),s("li",[s("code",[a._v("[\\b]")]),a._v(": 匹配一个退格符（backspace）（不要与 \\b 混淆）")])])]),a._v(" "),s("li",[s("p",[a._v("字符集合（字符组）")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("[xyz]")]),a._v(": 匹配集合中的任意一个字符。你可以使用连字符'-'指定一个范围。例如，[abcd] 等价于 [a-d]。")]),a._v(" "),s("li",[s("code",[a._v("[^xyz]")]),a._v(": 一个反义或补充字符集，也叫反义字符组。也就是说，它匹配任意不在括号内的字符。")])])]),a._v(" "),s("li",[s("p",[a._v("边界")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("^")]),a._v("与"),s("code",[a._v("$")]),a._v(": 匹配输入开始与结尾。")]),a._v(" "),s("li",[s("code",[a._v("\\b")]),a._v(': 匹配一个零宽单词边界（zero-width word boundary），如一个字母与一个空格之间。例如，/\\bno/ 匹配 "at noon" 中的 "no"，/ly\\b/ 匹配 "possibly yesterday." 中的 "ly"。')]),a._v(" "),s("li",[s("code",[a._v("\\B")]),a._v(': 匹配一个零宽非单词边界（zero-width non-word boundary），如两个字母之间或两个空格之间。例如，/\\Bon/ 匹配 "at noon" 中的 "on"，/ye\\B/ 匹配 "possibly yesterday." 中的 "ye"。')])])]),a._v(" "),s("li",[s("p",[a._v("分组与反向引用")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("(x)")]),a._v(': 匹配 x 并且捕获匹配项。例如，/(foo)/ 匹配且捕获 "foo bar." 中的 "foo"。')]),a._v(" "),s("li",[s("code",[a._v("\\n")]),a._v(': n 是一个正整数。一个反向引用（back reference），指向正则表达式中第 n 个括号（从左开始数）中匹配的子字符串。例如，/apple(,)\\sorange\\1/ 匹配 "apple, orange, cherry, peach." 中的 "apple,orange,"。')]),a._v(" "),s("li",[s("code",[a._v("(?:x)")]),a._v(": 匹配 x 不会捕获匹配项。")])])]),a._v(" "),s("li",[s("p",[a._v("数量词")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("x*?")]),a._v("与"),s("code",[a._v("x+?")]),a._v(": 像上面的 * 和 + 一样匹配前面的模式 x，"),s("strong",[a._v("然而匹配是最小可能匹配")]),a._v("。")]),a._v(" "),s("li",[s("code",[a._v("x?")]),a._v(": 匹配前面的模式 x 0 或 1 次。***如果在数量词 *、+、? 或 {}, 任意一个后面紧跟该符号（?），***会使数量词变为非贪婪（ non-greedy） ，即匹配次数最小化。反之，默认情况下，是贪婪的（greedy），即匹配次数最大化。")]),a._v(" "),s("li",[s("code",[a._v("x(?=y)")]),a._v(": 只有当 x 后面紧跟着 y 时，才匹配 x。")]),a._v(" "),s("li",[s("code",[a._v("x(?!y)")]),a._v(": 只有当 x 后面不是紧跟着 y 时，才匹配 x。")]),a._v(" "),s("li",[s("code",[a._v("x|y")]),a._v(": 匹配 x 或 y。")]),a._v(" "),s("li",[s("code",[a._v("x{n}")]),a._v(': n 是一个正整数。前面的模式 x 连续出现 n 次时匹配。例如，/a{2}/ 不匹配 "candy," 中的 "a"，但是匹配 "caandy," 中的两个 "a"，且匹配 "caaandy." 中的前两个 "a"。')]),a._v(" "),s("li",[s("code",[a._v("x{n,}")]),a._v(':n 是一个正整数。前面的模式 x 连续出现至少 n 次时匹配。例如，/a{2,}/ 不匹配 "candy" 中的 "a"，但是匹配 "caandy" 和 "caaaaaaandy." 中所有的 "a"。')]),a._v(" "),s("li",[s("code",[a._v("x{n,m}")]),a._v(': n 和 m 为正整数。前面的模式 x 连续出现至少 n 次，至多 m 次时匹配。例如，/a{1,3}/ 不匹配 "cndy"，匹配 "candy," 中的 "a"，"caandy," 中的两个 "a"，匹配 "caaaaaaandy" 中的前面三个 "a"。注意，当匹配 "caaaaaaandy" 时，即使原始字符串拥有更多的 "a"，匹配项也是 "aaa"。')])])])]),a._v(" "),s("h2",{attrs:{id:"常用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用方法"}},[a._v("#")]),a._v(" 常用方法")]),a._v(" "),s("ol",[s("li",[s("p",[s("code",[a._v("regexObj.exec(str)")]),a._v(": str 是要匹配正则表达式的字符串。匹配成功返回一个数组，并更新正则表达式对象的属性。匹配失败，"),s("code",[a._v("exec()")]),a._v(" 方法返回 null。类似于 "),s("code",[a._v("String.prototype.match()")]),a._v(" 方法。")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v('// Match "quick brown" followed by "jumps", ignoring characters in between')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v('// Remember "brown" and "jumps"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// Ignore case")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" re "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[a._v("/quick\\s(brown).+?(jumps)/ig")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" re"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'The Quick Brown Fox Jumps Over The Lazy Dog'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("ul",[s("li",[a._v("result(数组)\n"),s("ul",[s("li",[s("code",[a._v("[0]")]),a._v(": 匹配的全部字符串 --\x3e Quick Brown Fox Jumps")]),a._v(" "),s("li",[s("code",[a._v("[1], ...[n]")]),a._v(": 括号中的分组捕获 --\x3e [1] = Brown, [2] = Jumps")]),a._v(" "),s("li",[s("code",[a._v("index")]),a._v(": 匹配到的字符位于原始字符串的基于0的索引值 --\x3e 4")]),a._v(" "),s("li",[s("code",[a._v("input")]),a._v(": 原始字符串 --\x3e "),s("code",[a._v("The Quick Brown Fox Jumps Over The Lazy Dog")])])])]),a._v(" "),s("li",[a._v("re(RegExp对象)\n"),s("ul",[s("li",[s("code",[a._v("lastIndex")]),a._v(": 下一次匹配开始的位置 --\x3e 25")]),a._v(" "),s("li",[s("code",[a._v("ignoreCase")]),a._v(": 是否使用了'i'标记使正则匹配忽略大小写 --\x3e true")]),a._v(" "),s("li",[s("code",[a._v("global")]),a._v(": 是否使用了'g'标记来进行全局的匹配 --\x3e true")]),a._v(" "),s("li",[s("code",[a._v("multiline")]),a._v(": 是否使用了'm'标记使正则工作在多行模式 --\x3e false")]),a._v(" "),s("li",[s("code",[a._v("source")]),a._v(": 正则匹配的字符串 --\x3e "),s("code",[a._v("quick\\s(brown).+?(jumps)")])])])])])]),a._v(" "),s("li",[s("p",[s("code",[a._v("regexObj.test(str)")]),a._v(": 如果正则表达式与指定的字符串匹配 ，返回true；否则false。类似于 "),s("code",[a._v("String.prototype.search()")]),a._v(" 方法，差别在于test返回一个布尔值，而 search 返回索引（如果找到）或者-1（如果没找到）。")])])]),a._v(" "),s("h2",{attrs:{id:"贪婪模式与惰性模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#贪婪模式与惰性模式"}},[a._v("#")]),a._v(" 贪婪模式与惰性模式")]),a._v(" "),s("ol",[s("li",[a._v("贪婪模式：匹配尽可能多的字符\n贪婪量词：?   +   *   {n}   {n,m}   {n,}")]),a._v(" "),s("li",[a._v("惰性模式：匹配尽可能少的字符\n惰性量词：??   +?   *?   {n}?   {n,m}?   {n,}?")])]),a._v(" "),s("h3",{attrs:{id:"邮箱的正则表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#邮箱的正则表达式"}},[a._v("#")]),a._v(" 邮箱的正则表达式")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("只允许英文字母、数字、下划线、英文句号、以及中划线组成")]),a._v(" "),s("p",[a._v("例如：zhangsan-001@gmail.com")]),a._v(" "),s("p",[a._v("由于邮箱的基本格式为“名称@域名”，需要使用“^”匹配邮箱的开始部分，用“$”匹配邮箱结束部分以保证邮箱前后不能有其他字符，所以最终邮箱的正则表达式为：")]),a._v(" "),s("p",[s("code",[a._v("^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$")])])]),a._v(" "),s("li",[s("p",[a._v("\b名称允许汉字、字母、数字，域名只允许英文域名")]),a._v(" "),s("p",[a._v("例如： 帽子001Abc@lenovo.com.cn")]),a._v(" "),s("p",[s("code",[a._v("^[A-Za-z0-9\\u4e00-\\u9fa5]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$")])])])])])}),[],!1,null,null,null);e.default=t.exports}}]);