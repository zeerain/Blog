(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{220:function(s,e,t){"use strict";t.r(e);var n=t(0),a=Object(n.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"then-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#then-方法"}},[s._v("#")]),s._v(" then 方法")]),s._v(" "),t("p",[s._v("我们都知道 "),t("code",[s._v("Promise")]),s._v(" 对象有一个 "),t("code",[s._v("then")]),s._v(" 方法，用来处理 "),t("code",[s._v("Promise")]),s._v(" 状态确定时相应的逻辑，因此，我们自己要实现 "),t("code",[s._v("Promise")]),s._v(" 的话，"),t("code",[s._v("then")]),s._v(" 方法需要写在原型链上，那么 "),t("code",[s._v("then")]),s._v(" 方法为什么会返回一个 "),t("code",[s._v("Promise")]),s._v(" 呢？")]),s._v(" "),t("h3",{attrs:{id:"原因"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原因"}},[s._v("#")]),s._v(" 原因")]),s._v(" "),t("p",[s._v("关于上面谈到的问题，"),t("code",[s._v("Promise/A+")]),s._v(" 标准并没有要求返回的一个新的 "),t("code",[s._v("Promise")]),s._v(" 对象，但在 "),t("code",[s._v("Promise/A")]),s._v(" 标准中，明确规定了要返回一个新的对象，但目前的实现中 "),t("code",[s._v("then")]),s._v(" 几乎都是返回一个新的 "),t("code",[s._v("Promise")]),s._v("。")]),s._v(" "),t("p",[s._v("标准中说，如果 "),t("code",[s._v("promise2 = promise1.then(onResolved,onRejected)")]),s._v(" 里的 "),t("code",[s._v("onResolved/onRejected")]),s._v(" 返回一个 "),t("code",[s._v("Promise")]),s._v("，则 "),t("code",[s._v("promise2")]),s._v(" 直接取这个 "),t("code",[s._v("Promise")]),s._v(" 的状态和值为己用，就像如下代码：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" promise1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Promise")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("resolve"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("reject")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("resolve")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" promise2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" promise1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("then")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("value")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" Promise"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("reject")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("此时，如果 "),t("code",[s._v("promise1")]),s._v(" 执行了，则说明 "),t("code",[s._v("promise1")]),s._v(" 的状态必然已经是 "),t("code",[s._v("resolved")]),s._v("。假如 "),t("code",[s._v("then")]),s._v(" 返回了 "),t("code",[s._v("this")]),s._v("（即 "),t("strong",[s._v("promise2 === promise1")]),s._v("），那么 "),t("code",[s._v("promise2")]),s._v(" 与 "),t("code",[s._v("promise1")]),s._v(" 就是同一个对象，而此时的 "),t("code",[s._v("promise1/2")]),s._v(" 的状态已经确定，没有办法再取 "),t("code",[s._v("Promise.reject(2)")]),s._v(" 的状态和结果为己用，因为 "),t("code",[s._v("Promise")]),s._v(" 的状态确定后就无法再转换为其它状态。")]),s._v(" "),t("p",[s._v("而且，每个 "),t("code",[s._v("Promise")]),s._v(" 都可以在其上多次调用 "),t("code",[s._v("then")]),s._v(" 方法，而每个 "),t("code",[s._v("then")]),s._v(" 返回的 "),t("code",[s._v("Promise")]),s._v(" 的状态取决于那一次调用 "),t("code",[s._v("then")]),s._v(" 时的参数的返回值，所以 "),t("code",[s._v("then")]),s._v(" 不能返回 "),t("code",[s._v("this")]),s._v("，因为 "),t("code",[s._v("then")]),s._v(" 每次返回的 "),t("code",[s._v("Promise")]),s._v(" 的结果都有可能不同。")])])}),[],!1,null,null,null);e.default=a.exports}}]);